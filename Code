// Required imports
const express = require('express')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const jwt = require('jsonwebtoken')
const path = require('path')
const bcrypt = require('bcrypt')

// Initialize Express app
const app = express()
app.use(express.json())

// Database path
const dbPath = path.join(__dirname, 'twitterClone.db')

// Global variable to hold database connection
let database = null

// Initialize database and start server
const initializeDBAndServer = async () => {
  try {
    database = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (error) {
    console.log(`DB Error: ${error.message}`)
    process.exit(1)
  }
}
initializeDBAndServer()

// Secret key for JWT
const SECRET_KEY = 'your_secret_key_here'

// Export Express app using default export syntax
module.exports = app

// API 1: Register a new user
app.post('/register/', async (request, response) => {
  const {username, password, name, gender} = request.body
  const hashedPassword = await bcrypt.hash(password, 10)

  // Check if the username already exists
  const checkUserQuery = `SELECT * FROM user WHERE username = ?`
  try {
    const existingUser = await database.get(checkUserQuery, username)
    if (existingUser) {
      return response.status(400).send('User already exists')
    }
    // Check if the password length is less than 6 characters
    if (password.length < 6) {
      return response.status(400).send('Password is too short')
    }

    const insertUserQuery = `INSERT INTO user (username, password, name, gender) VALUES (?, ?, ?, ?)`
    await database.run(insertUserQuery, [
      username,
      hashedPassword,
      name,
      gender,
    ])
    response.status(200).send('User created successfully')
  } catch (error) {
    console.error(`Register Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 2: Login user and return JWT token
app.post('/login/', async (request, response) => {
  const {username, password} = request.body
  const loginUserQuery = `SELECT * FROM user WHERE username = ?`

  try {
    const user = await database.get(loginUserQuery, [username])
    if (!user) {
      response.status(400).send('Invalid user')
      return
    }

    const isPasswordValid = await bcrypt.compare(password, user.password)
    if (!isPasswordValid) {
      response.status(400).send('Invalid password')
      return
    }

    const accessToken = jwt.sign({username: user.username}, SECRET_KEY)
    response.json({jwtToken: accessToken})
  } catch (error) {
    console.error(`Login Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// Middleware to authenticate JWT token
const authenticateToken = (request, response, next) => {
  const authHeader = request.headers['authorization']
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    response.status(401).send('Invalid JWT Token')
    return
  }
  const token = authHeader.split(' ')[1]
  jwt.verify(token, SECRET_KEY, (error, payload) => {
    if (error) {
      response.status(401).send('Invalid JWT Token')
      return
    }
    request.user = payload
    next()
  })
}

// API 3: Get latest tweets from people whom the user follows
app.get('/user/tweets/feed/', authenticateToken, async (request, response) => {
  const {username} = request.user

  const getLatestTweetsQuery = `
    SELECT u.username, t.tweet, t.date_time AS dateTime
    FROM tweet t
    JOIN user u ON t.user_id = u.user_id
    JOIN follower f ON t.user_id = f.following_user_id
    WHERE f.follower_user_id = (SELECT user_id FROM user WHERE username = ?)
    ORDER BY t.date_time DESC
    LIMIT 4;
    `

  try {
    const latestTweets = await database.all(getLatestTweetsQuery, [username])
    response.json(latestTweets)
  } catch (error) {
    console.error(`Get Latest Tweets Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 4: Get list of all names of people whom the user follows
app.get('/user/following/', authenticateToken, async (request, response) => {
  const {username} = request.user

  const getFollowingQuery = `
    SELECT u.name
    FROM user u
    INNER JOIN follower f ON u.user_id = f.following_user_id
    WHERE f.follower_user_id = (SELECT user_id FROM user WHERE username = ?)
  `

  try {
    const following = await database.all(getFollowingQuery, [username])
    response.json(following)
  } catch (error) {
    console.error(`Get Following Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 5: Get list of all names of people who follow the user
app.get('/user/followers/', authenticateToken, async (request, response) => {
  const {username} = request.user

  const getFollowersQuery = `
    SELECT u.name
    FROM user u
    INNER JOIN follower f ON u.user_id = f.follower_user_id
    INNER JOIN user u2 ON f.following_user_id = u2.user_id
    WHERE u2.username = ?
  `

  try {
    const followers = await database.all(getFollowersQuery, [username])
    response.json(followers)
  } catch (error) {
    console.error(`Get Followers Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 6: Get list of all tweets of the authenticated user
app.get('/user/tweets/', authenticateToken, async (request, response) => {
  const {username} = request.user

  const getUserTweetsQuery = `
    SELECT tweet
    FROM tweet
    WHERE user_id = (SELECT user_id FROM user WHERE username = ?)
  `

  try {
    const userTweets = await database.all(getUserTweetsQuery, [username])
    response.json(userTweets)
  } catch (error) {
    console.error(`Get User Tweets Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 7: Get tweet details by tweetId
app.get('/tweets/:tweetId/', authenticateToken, async (request, response) => {
  const {tweetId} = request.params
  const {username} = request.user

  const getTweetDetailsQuery = `
    SELECT t.tweet
    FROM tweet t
    JOIN user u ON t.user_id = u.user_id
    WHERE t.tweet_id = ? AND u.username IN (
      SELECT u.username
      FROM user u
      JOIN follower f ON u.user_id = f.following_user_id
      WHERE f.follower_user_id = (SELECT user_id FROM user WHERE username = ?)
    )
  `

  try {
    const tweet = await database.get(getTweetDetailsQuery, [tweetId, username])
    if (!tweet) {
      response.status(401).send('Invalid Request')
      return
    }
    response.json(tweet)
  } catch (error) {
    console.error(`Get Tweet Details Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 8: Get list of usernames who liked the tweet by tweetId
app.get(
  '/tweets/:tweetId/likes/',
  authenticateToken,
  async (request, response) => {
    const {tweetId} = request.params
    const {username} = request.user

    const getLikedUsersQuery = `
    SELECT u.username
    FROM user u
    JOIN likes l ON u.user_id = l.user_id
    WHERE l.tweet_id = ? AND EXISTS (
      SELECT 1
      FROM user u
      JOIN follower f ON u.user_id = f.following_user_id
      WHERE f.follower_user_id = (SELECT user_id FROM user WHERE username = ?)
    )
  `

    try {
      const likedUsers = await database.all(getLikedUsersQuery, [
        tweetId,
        username,
      ])
      if (!likedUsers.length) {
        response.status(401).send('Invalid Request')
        return
      }
      const usernames = likedUsers.map(user => user.username)
      response.json({likes: usernames})
    } catch (error) {
      console.error(`Get Liked Users Error: ${error.message}`)
      response.status(500).send('Internal Server Error')
    }
  },
)

// API 9: Get tweet and replies by tweetId
app.get(
  '/tweets/:tweetId/replies/',
  authenticateToken,
  async (request, response) => {
    const {tweetId} = request.params
    const {username} = request.user

    const getTweetAndRepliesQuery = `
    SELECT t.tweet, r.reply
    FROM tweet t
    LEFT JOIN reply r ON t.tweet_id = r.tweet_id
    WHERE t.tweet_id = ? AND t.user_id IN (
      SELECT u.user_id
      FROM user u
      JOIN follower f ON u.user_id = f.following_user_id
      WHERE f.follower_user_id = (SELECT user_id FROM user WHERE username = ?)
    )
  `

    try {
      const tweetAndReplies = await database.all(getTweetAndRepliesQuery, [
        tweetId,
        username,
      ])
      if (!tweetAndReplies.length) {
        response.status(401).send('Invalid Request')
        return
      }
      response.json(tweetAndReplies)
    } catch (error) {
      console.error(`Get Tweet and Replies Error: ${error.message}`)
      response.status(500).send('Internal Server Error')
    }
  },
)

// API 10: Create a tweet for the authenticated user
app.post('/user/tweets/', authenticateToken, async (request, response) => {
  const {tweet} = request.body
  const {username} = request.user

  const createTweetQuery = `
    INSERT INTO tweet (tweet, user_id)
    VALUES (?, (SELECT user_id FROM user WHERE username = ?))
  `

  try {
    await database.run(createTweetQuery, [tweet, username])
    response.send('Created a Tweet')
  } catch (error) {
    console.error(`Create Tweet Error: ${error.message}`)
    response.status(500).send('Internal Server Error')
  }
})

// API 11: Delete a tweet by tweetId
app.delete('/tweets/:tweetId/', authenticateToken, async (request, response) => {
  const { tweetId } = request.params;
  const { username } = request.user;

  const deleteTweetQuery = `
    DELETE FROM tweet
    WHERE tweet_id = ? AND user_id = (SELECT user_id FROM user WHERE username = ?)
  `;

  try {
    // Check if JWT token exists
    if (!username) {
      response.status(401).send('Invalid JWT Token');
      return;
    }

    // Check if the tweet belongs to the user
    const result = await database.run(deleteTweetQuery, [tweetId, username]);
    if (result.changes === 0) {
      response.status(401).send('Invalid Request');
      return;
    }

    // Tweet successfully deleted, send response
    response.send('Tweet Removed');
  } catch (error) {
    console.error(`Delete Tweet Error: ${error.message}`);
    response.status(500).send('Internal Server Error');
  }
});
